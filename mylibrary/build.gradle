apply plugin: 'com.android.library'

android {
    compileSdkVersion 29
    buildToolsVersion "29.0.3"

    defaultConfig {
        minSdkVersion 16
        targetSdkVersion 29
        versionCode 1
        versionName "1.0"

        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
        consumerProguardFiles 'consumer-rules.pro'
    }

    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }
    }

}

configurations {
    myConfig
}

dependencies {
    implementation fileTree(dir: 'libs', include: ['*.jar'])

    implementation 'androidx.appcompat:appcompat:1.2.0'
    implementation 'androidx.recyclerview:recyclerview:1.1.0'
    testImplementation 'junit:junit:4.12'
    androidTestImplementation 'androidx.test.ext:junit:1.1.2'
    androidTestImplementation 'androidx.test.espresso:espresso-core:3.3.0'
}



project.afterEvaluate {
    def isAndroidLibraryProject = project.plugins.hasPlugin('com.android.library')
    if(isAndroidLibraryProject) {
        task copyLibs(type: Copy) {
            from configurations.myConfig
            into "libs"
        }
        mergeReleaseJniLibFolders.dependsOn copyLibs

        task copyDeps(type:Copy) {
            from configurations.myConfig {
                include '**/*.jar'
            }
            into "./build/intermediates/packaged-classes/release/libs" // this folder gets packaged inside the AAR
        }
        mergeReleaseJniLibFolders.dependsOn copyDeps // only this stage worked for me - neither earlier, nor later

        task copyDebugDeps(type:Copy) {
            from configurations.myConfig {
                include '**/*.jar'
            }
            into "./build/intermediates/packaged-classes/debug/libs"
        }
        mergeDebugJniLibFolders.dependsOn copyDebugDeps
    }
}